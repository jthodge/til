name: Build and Deploy

on:
  push:
    branches:
      - main

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quality gates
  test:
    uses: ./.github/workflows/test.yml
  
  # Database health validation (quality gate before deployment)
  validate-database:
    needs: test
    uses: ./.github/workflows/database-validation.yml
  
  # Build preparation (can start while validation runs)
  prepare-build:
    runs-on: ubuntu-latest
    outputs:
      should-rebuild: ${{ steps.check-rebuild.outputs.rebuild }}
    
    steps:
      - name: Check out jthodge/til
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: main
      
      - name: Check out jthodge/til-db
        uses: actions/checkout@v4
        with:
          repository: jthodge/til-db
          path: til-db
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_PUSH }}
      
      - name: Check if REBUILD in commit message
        id: check-rebuild
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"REBUILD"* ]]; then
            echo "rebuild=true" >> $GITHUB_OUTPUT
          else
            echo "rebuild=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          github-token: ${{ github.token }}
          cache-prefix: "build"
      
      - name: Install dependencies
        run: |
          cd main
          uv venv
          uv sync
      
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            main/til.db
            main/.venv
          key: build-artifacts-${{ github.sha }}
  
  # Main build job - waits for validation and tests
  build:
    needs: [test, validate-database, prepare-build]
    # Only build if tests pass and database is healthy
    if: |
      always() && 
      needs.test.result == 'success' &&
      needs.validate-database.outputs.validation-status == 'healthy'
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Database validation summary
        run: |
          echo "🔍 Database Validation Results:"
          echo "Status: ${{ needs.validate-database.outputs.validation-status }}"
          echo "Report: ${{ needs.validate-database.outputs.validation-report }}"
          echo "✅ Proceeding with deployment of validated database"
      
      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            main/til.db
            main/.venv
          key: build-artifacts-${{ github.sha }}
      
      - name: Check out jthodge/til
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: main
      
      - name: Check out jthodge/til-db
        uses: actions/checkout@v4
        with:
          repository: jthodge/til-db
          path: til-db
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_PUSH }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          github-token: ${{ github.token }}
          cache-prefix: "build"
      
      - name: Download previous database unless REBUILD
        if: needs.prepare-build.outputs.should-rebuild != 'true'
        run: |
          curl --fail -o main/til.db https://raw.githubusercontent.com/jthodge/til-db/main/til.db || true
        continue-on-error: true
      
      - name: Remove existing database for REBUILD
        if: needs.prepare-build.outputs.should-rebuild == 'true'
        run: |
          cd main
          rm -f til.db
          echo "Starting fresh database build"
      
      - name: Build database
        env:
          MARKDOWN_GITHUB_TOKEN: ${{ secrets.MARKDOWN_GITHUB_TOKEN }}
        run: |
          cd main
          uv run til build
      
      - name: Fix creation dates
        run: |
          cd main
          uv run til fix-creation-dates
      
      - name: Perform soundness check
        run: |
          cd main
          uv run datasette . --template-dir src/templates --get / | grep "Taylor Hodge - TIL"
      
      - name: Update README
        run: |
          cd main
          uv run til update-readme --rewrite
          cat README.md
      
      - name: Commit and push if README changed
        run: |
          cd main
          git diff
          git config --global user.email "j.taylor.hodge@gmail.com"
          git config --global user.name "jthodge"
          git stash --include-untracked
          git pull origin main --rebase
          git stash pop || true
          git diff --quiet || (git add README.md uv.lock && git commit -m "Updated README")
          git push
      
      - name: Save til.db to jthodge/til-db
        run: |
          cd til-db
          cp ../main/til.db .
          git add til.db
          git commit --amend --no-edit
          git push --force
      
      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          cd main
          # Install flyctl
          curl -L https://fly.io/install.sh | sh
          export PATH="$HOME/.fly/bin:$PATH"
          
          # Deploy using datasette publish fly
          uv run datasette publish fly til.db \
            --app til-taylorhodge \
            --metadata metadata.yaml \
            --static static:src/static \
            --install datasette-template-sql \
            --install "datasette-sitemap>=1.0" \
            --install "datasette-atom>=0.7" \
            --install datasette-json-html \
            --install beautifulsoup4 \
            --install "datasette-debug-asgi>=1.1" \
            --install "datasette-graphql>=2.2" \
            --install datasette-block-robots \
            --plugins-dir src/plugins \
            --template-dir src/templates
      
      # - name: Post Slack Notification
      #   if: success()
      #   uses: rtCamp/action-slack-notify@master
      #   env:
      #     SLACK_ICON: https://user-images.githubusercontent.com/17075617/149437305-53baad9e-9800-4fe4-a3bf-13bd28d98f8b.png
      #     SLACK_USERNAME: taylor
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}