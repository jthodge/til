name: Migrate Database (Remove Duplicates)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to migrate'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  migrate:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        uv sync
    
    - name: Download current database
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        # Download the current database from production
        # This will depend on your deployment setup
        # For example, if using Heroku:
        # heroku pg:backups:download --app your-app-name
        # For now, we'll assume the database is accessible via URL
        curl -o til.db "$DATABASE_URL"
    
    - name: Run migration
      run: |
        uv run python src/til/production_safe_migration.py til.db
    
    - name: Validate migration
      run: |
        # Run tests to ensure database is valid
        uv run pytest tests/test_database.py -v
        
        # Check database integrity
        uv run sqlite3 til.db "PRAGMA integrity_check;"
        
        # Ensure no duplicates remain
        uv run sqlite3 til.db "SELECT slug, topic, COUNT(*) as count FROM til GROUP BY slug, topic HAVING count > 1;" | wc -l | grep -q "0"
    
    - name: Generate test report
      if: always()
      run: |
        echo "## Migration Report" > migration_report.md
        echo "Environment: ${{ github.event.inputs.environment }}" >> migration_report.md
        echo "Date: $(date)" >> migration_report.md
        echo "" >> migration_report.md
        
        # Add statistics
        echo "### Database Statistics" >> migration_report.md
        echo "Total entries: $(uv run sqlite3 til.db 'SELECT COUNT(*) FROM til;')" >> migration_report.md
        echo "Entries with content/ prefix: $(uv run sqlite3 til.db 'SELECT COUNT(*) FROM til WHERE path LIKE \"content_%\";')" >> migration_report.md
        echo "Entries without timestamps: $(uv run sqlite3 til.db 'SELECT COUNT(*) FROM til WHERE created IS NULL;')" >> migration_report.md
        
        cat migration_report.md
    
    - name: Upload migrated database
      if: success() && github.event.inputs.environment == 'production'
      env:
        DATABASE_UPLOAD_URL: ${{ secrets.DATABASE_UPLOAD_URL }}
      run: |
        # Upload the migrated database back to production
        # This will depend on your deployment setup
        curl -X PUT -T til.db "$DATABASE_UPLOAD_URL"
    
    - name: Notify success
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: '✅ Database migration completed successfully in ${{ github.event.inputs.environment }}'
          })
    
    - name: Notify failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: '❌ Database migration failed in ${{ github.event.inputs.environment }}. Check the logs for details.'
          })