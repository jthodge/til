name: Test with Migration

on:
  pull_request:
    paths:
      - 'src/til/cleanup_old_entries.py'
      - 'src/til/production_safe_migration.py'
      - 'src/til/readme_generator.py'
      - 'tests/**/test_*migration*.py'
  push:
    branches: [ main ]
  workflow_call:

jobs:
  # Standard unit tests
  test-unit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          - python-version: '3.9'
            test-depth: 'full'
          - python-version: '3.10'
            test-depth: 'smoke'
          - python-version: '3.11'
            test-depth: 'smoke'
          - python-version: '3.12'
            test-depth: 'full'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        github-token: ${{ github.token }}
        cache-prefix: "test-py${{ matrix.python-version }}"
    
    - name: Install dependencies
      run: |
        uv venv
        uv sync --extra dev
    
    - name: Run full tests with coverage
      if: matrix.test-depth == 'full'
      run: |
        uv run pytest tests/ -v --cov=til --cov-report=xml --cov-report=term-missing
    
    - name: Run smoke tests
      if: matrix.test-depth == 'smoke'
      run: |
        uv run pytest tests/test_cli.py tests/test_processor.py tests/test_database.py -v
    
    - name: Upload coverage to Codecov
      if: matrix.test-depth == 'full'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: py${{ matrix.python-version }}
        name: Python ${{ matrix.python-version }}
        fail_ci_if_error: false

  # Migration-specific tests
  test-migration:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        github-token: ${{ github.token }}
    
    - name: Install dependencies
      run: |
        uv venv
        uv sync --extra dev
    
    - name: Create test database with duplicates
      run: |
        # Create a test database that simulates the duplicate issue
        cat > create_test_db.py << 'EOF'
        import sqlite3
        from datetime import datetime
        
        # Create database with old structure
        conn = sqlite3.connect('test_migration.db')
        cursor = conn.cursor()
        
        # Create table
        cursor.execute('''
            CREATE TABLE til (
                path TEXT PRIMARY KEY,
                slug TEXT,
                topic TEXT,
                title TEXT,
                body TEXT,
                html TEXT,
                created TEXT,
                created_utc TEXT,
                updated TEXT,
                updated_utc TEXT,
                url TEXT
            )
        ''')
        
        # Insert old-style entries
        old_entries = [
            ('bash_test-entry.md', 'test-entry', 'bash', 'Test Entry', 'Body', '<p>Body</p>', 
             '2020-01-01T00:00:00', '2020-01-01T00:00:00', '2020-01-01T00:00:00', '2020-01-01T00:00:00',
             'https://github.com/jthodge/til/blob/main/bash/test-entry.md'),
            ('python_another-test.md', 'another-test', 'python', 'Another Test', 'Body 2', '<p>Body 2</p>',
             '2021-01-01T00:00:00', '2021-01-01T00:00:00', '2021-01-01T00:00:00', '2021-01-01T00:00:00',
             'https://github.com/jthodge/til/blob/main/python/another-test.md'),
        ]
        
        # Insert new-style entries (duplicates)
        new_entries = [
            ('content_bash_test-entry.md', 'test-entry', 'bash', 'Test Entry', 'Body', '<p>Body</p>',
             None, None, None, None,
             'https://github.com/jthodge/til/blob/main/content/bash/test-entry.md'),
            ('content_python_another-test.md', 'another-test', 'python', 'Another Test', 'Body 2', '<p>Body 2</p>',
             None, None, None, None,
             'https://github.com/jthodge/til/blob/main/content/python/another-test.md'),
        ]
        
        cursor.executemany('INSERT INTO til VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', 
                          old_entries + new_entries)
        
        conn.commit()
        conn.close()
        EOF
        
        uv run python create_test_db.py
    
    
    - name: Test deduplication
      run: |
        cp test_migration.db test_dedup.db
        uv run python src/til/cleanup_old_entries.py test_dedup.db
        
        # Verify old entries were removed
        COUNT=$(uv run sqlite3 test_dedup.db "SELECT COUNT(*) FROM til WHERE path NOT LIKE 'content_%';")
        if [ "$COUNT" -ne 0 ]; then
          echo "ERROR: Old entries not removed"
          exit 1
        fi
    
    - name: Test production-safe migration
      run: |
        cp test_migration.db test_prod.db
        uv run python src/til/production_safe_migration.py test_prod.db
        
        # Verify complete migration
        DUPLICATES=$(uv run sqlite3 test_prod.db "SELECT slug, topic, COUNT(*) as count FROM til GROUP BY slug, topic HAVING count > 1;" | wc -l)
        if [ "$DUPLICATES" -ne 0 ]; then
          echo "ERROR: Duplicates remain after migration"
          exit 1
        fi
        
        # Verify timestamps preserved
        RESULT=$(uv run sqlite3 test_prod.db "SELECT created FROM til WHERE path = 'content_bash_test-entry.md';")
        if [ "$RESULT" != "2020-01-01T00:00:00" ]; then
          echo "ERROR: Timestamps not preserved"
          exit 1
        fi
    
    - name: Test rollback functionality
      run: |
        cp test_migration.db test_rollback.db
        
        # Simulate a failed migration by modifying the script
        cat > failing_migration.py << 'EOF'
        import sys
        import shutil
        from src.til.production_safe_migration import ProductionMigration
        
        class FailingMigration(ProductionMigration):
            def validate_migration(self):
                # Force validation to fail
                return False
        
        migration = FailingMigration(sys.argv[1])
        migration.run()
        EOF
        
        uv run python failing_migration.py test_rollback.db
        
        # Verify database was rolled back
        if ! cmp -s test_migration.db test_rollback.db; then
          echo "ERROR: Rollback did not restore original database"
          exit 1
        fi
    
    - name: Test README generation with null timestamps
      run: |
        # Create database with null timestamps
        cat > test_readme.py << 'EOF'
        import sqlite3
        from pathlib import Path
        from src.til.database import TILDatabase
        from src.til.readme_generator import ReadmeGenerator
        
        # Create test database
        conn = sqlite3.connect('test_readme.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE til (
                path TEXT PRIMARY KEY,
                slug TEXT,
                topic TEXT,
                title TEXT,
                url TEXT,
                body TEXT,
                html TEXT,
                created TEXT,
                created_utc TEXT,
                updated TEXT,
                updated_utc TEXT
            )
        ''')
        
        # Insert entry with null timestamp
        cursor.execute('''
            INSERT INTO til (path, slug, topic, title, body, created, created_utc, url, html, updated, updated_utc) VALUES 
            ('test.md', 'test', 'testing', 'Test', 'Body', NULL, NULL, 'http://example.com', '<p>Body</p>', NULL, NULL)
        ''')
        conn.commit()
        conn.close()
        
        # Test README generation
        db = TILDatabase(Path('test_readme.db'))
        generator = ReadmeGenerator(db)
        index = generator.generate_index()
        
        # Should not crash with null timestamp
        assert any('Test' in line for line in index)
        print("README generation with null timestamps: PASSED")
        EOF
        
        uv run python test_readme.py

  # Type checking
  test-types:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        github-token: ${{ github.token }}
    
    - name: Install dependencies
      run: |
        uv venv
        uv sync --extra dev
    
    - name: Run type checks
      run: |
        uv run mypy src/til/

  # Linting
  test-lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        github-token: ${{ github.token }}
    
    - name: Install dependencies
      run: |
        uv venv
        uv sync --extra dev
    
    - name: Check code formatting
      run: |
        uv run ruff format --check src/til/ tests/
    
    - name: Run linting
      run: |
        uv run ruff check src/til/ tests/

  # Integration test
  test-integration:
    needs: [test-unit, test-migration]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        github-token: ${{ github.token }}
    
    - name: Install dependencies
      run: |
        uv venv
        uv sync --extra dev
    
    - name: Run full integration test
      run: |
        # Test the complete flow
        echo "Running full integration test..."
        
        # 1. Build initial database
        uv run til build
        
        # 2. Update README
        uv run til update-readme --rewrite
        
        # 3. Verify no duplicates
        DUPLICATES=$(uv run sqlite3 til.db "SELECT slug, topic, COUNT(*) as count FROM til GROUP BY slug, topic HAVING count > 1;" | wc -l)
        if [ "$DUPLICATES" -ne 0 ]; then
          echo "ERROR: Duplicates found in fresh build"
          exit 1
        fi
        
        echo "Integration test: PASSED"