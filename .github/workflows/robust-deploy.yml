name: Robust Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete database rebuild'
        required: false
        default: false
        type: boolean

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Run tests using the reusable workflow
  test:
    uses: ./.github/workflows/test.yml
  
  # Pre-build validation and setup
  prepare-build:
    runs-on: ubuntu-latest
    outputs:
      should-rebuild: ${{ steps.check-rebuild.outputs.rebuild }}
      database-checksum: ${{ steps.db-checksum.outputs.checksum }}
    
    steps:
      - name: Check out jthodge/til
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: main
      
      - name: Check out jthodge/til-db
        uses: actions/checkout@v4
        with:
          repository: jthodge/til-db
          path: til-db
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_PUSH }}
      
      - name: Check if rebuild needed
        id: check-rebuild
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"REBUILD"* ]] || [[ "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "rebuild=true" >> $GITHUB_OUTPUT
            echo "üîÑ Full rebuild triggered"
          else
            echo "rebuild=false" >> $GITHUB_OUTPUT
            echo "üìà Incremental build"
          fi
      
      - name: Get database checksum
        id: db-checksum
        run: |
          if [ -f til-db/til.db ]; then
            checksum=$(sha256sum til-db/til.db | cut -d' ' -f1)
            echo "checksum=$checksum" >> $GITHUB_OUTPUT
            echo "Database checksum: $checksum"
          else
            echo "checksum=none" >> $GITHUB_OUTPUT
            echo "No existing database found"
          fi
  
  # Main build job with validation
  build:
    needs: [test, prepare-build]
    if: |
      always() && 
      needs.test.result == 'success'
    
    runs-on: ubuntu-latest
    outputs:
      validation-passed: ${{ steps.validate.outputs.passed }}
      new-checksum: ${{ steps.new-checksum.outputs.checksum }}
    
    steps:
      - name: Check out jthodge/til
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: main
      
      - name: Check out jthodge/til-db
        uses: actions/checkout@v4
        with:
          repository: jthodge/til-db
          path: til-db
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_PUSH }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          github-token: ${{ github.token }}
          cache-prefix: "build"
      
      - name: Install dependencies
        run: |
          cd main
          uv venv
          uv sync
      
      - name: Download previous database unless rebuilding
        if: needs.prepare-build.outputs.should-rebuild != 'true'
        run: |
          if [ -f til-db/til.db ]; then
            cp til-db/til.db main/til.db
            echo "‚úÖ Using existing database"
          else
            echo "‚ö†Ô∏è No existing database, will create fresh"
          fi
        continue-on-error: true
      
      - name: Remove existing database for rebuild
        if: needs.prepare-build.outputs.should-rebuild == 'true'
        run: |
          cd main
          rm -f til.db
          echo "üóëÔ∏è Removed existing database for fresh rebuild"
      
      - name: Build database
        env:
          MARKDOWN_GITHUB_TOKEN: ${{ secrets.MARKDOWN_GITHUB_TOKEN }}
        run: |
          cd main
          echo "üî® Building database..."
          uv run til build
      
      - name: Fix creation dates
        run: |
          cd main
          echo "üìÖ Fixing creation dates from git history..."
          uv run til fix-creation-dates
      
      - name: Validate database integrity
        id: validate
        run: |
          cd main
          echo "üîç Validating database integrity..."
          if uv run til validate-db --verbose; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Database validation passed"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Database validation failed"
            exit 1
          fi
      
      - name: Get new database checksum
        id: new-checksum
        run: |
          cd main
          checksum=$(sha256sum til.db | cut -d' ' -f1)
          echo "checksum=$checksum" >> $GITHUB_OUTPUT
          echo "New database checksum: $checksum"
      
      - name: Check for changes
        run: |
          cd main
          echo "Database changes:"
          echo "Previous: ${{ needs.prepare-build.outputs.database-checksum }}"
          echo "Current:  ${{ steps.new-checksum.outputs.checksum }}"
          if [ "${{ needs.prepare-build.outputs.database-checksum }}" != "${{ steps.new-checksum.outputs.checksum }}" ]; then
            echo "üìà Database has changes"
          else
            echo "üìä Database unchanged"
          fi
      
      - name: Perform soundness check
        run: |
          cd main
          echo "üß™ Running soundness check..."
          uv run datasette . --template-dir src/templates --get / | grep "Taylor Hodge - TIL"
          echo "‚úÖ Soundness check passed"
      
      - name: Update README
        run: |
          cd main
          echo "üìù Updating README..."
          uv run til update-readme --rewrite
          echo "README updated successfully"
      
      - name: Commit and push if README changed
        run: |
          cd main
          git config --global user.email "j.taylor.hodge@gmail.com"
          git config --global user.name "jthodge"
          git stash --include-untracked
          git pull origin main --rebase
          git stash pop || true
          if ! git diff --quiet README.md; then
            git add README.md
            git commit -m "Updated README"
            git push
            echo "üì§ README changes committed"
          else
            echo "üìÑ README unchanged"
          fi
      
      - name: Save validated database
        run: |
          cd til-db
          cp ../main/til.db .
          git add til.db
          if ! git diff --staged --quiet; then
            git commit -m "Database update (checksum: ${{ steps.new-checksum.outputs.checksum }})"
            git push
            echo "üíæ Database saved to til-db repository"
          else
            echo "üíæ Database unchanged, no save needed"
          fi
  
  # Deployment job with additional safeguards
  deploy:
    needs: [build]
    if: needs.build.outputs.validation-passed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out jthodge/til
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: main
      
      - name: Check out jthodge/til-db  
        uses: actions/checkout@v4
        with:
          repository: jthodge/til-db
          path: til-db
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_FOR_PUSH }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          github-token: ${{ github.token }}
          cache-prefix: "deploy"
      
      - name: Install dependencies
        run: |
          cd main
          uv venv
          uv sync
      
      - name: Use validated database
        run: |
          cd main
          cp ../til-db/til.db .
          echo "üìã Using validated database from til-db repository"
      
      - name: Final pre-deployment validation
        run: |
          cd main
          echo "üîç Final validation before deployment..."
          uv run til validate-db --verbose
          echo "‚úÖ Pre-deployment validation passed"
      
      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          cd main
          echo "üöÄ Deploying to Heroku..."
          
          # Install Heroku CLI
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku plugins:install heroku-builds
          
          # Use standard Python buildpack
          heroku buildpacks:clear -a til-taylorhodge || true
          heroku buildpacks:add -a til-taylorhodge heroku/python
          
          # Deploy using standard datasette publish
          uv run datasette publish heroku til.db \
            --branch main \
            --name til-taylorhodge \
            --metadata metadata.yaml \
            --static static:src/static \
            --install datasette-template-sql \
            --install "datasette-sitemap>=1.0" \
            --install "datasette-atom>=0.7" \
            --install datasette-json-html \
            --install beautifulsoup4 \
            --install "datasette-debug-asgi>=1.1" \
            --install "datasette-graphql>=2.2" \
            --install datasette-block-robots \
            --plugins-dir src/plugins \
            --template-dir src/templates
          
          echo "‚úÖ Deployment completed successfully"
      
      - name: Post-deployment verification
        continue-on-error: true
        run: |
          echo "üîç Verifying deployment..."
          sleep 30  # Give Heroku time to start
          
          # Basic connectivity check
          if curl -f -s "https://til-taylorhodge.herokuapp.com/" > /dev/null; then
            echo "‚úÖ Site is accessible"
          else
            echo "‚ö†Ô∏è Site accessibility check failed"
          fi