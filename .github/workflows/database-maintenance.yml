name: Database Maintenance

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      maintenance-type:
        description: 'Type of maintenance to perform'
        required: true
        default: 'check'
        type: choice
        options:
          - check
          - dedup
          - optimize
          - full

jobs:
  maintenance:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          github-token: ${{ github.token }}
      
      - name: Install dependencies
        run: |
          uv venv
          uv sync
      
      - name: Download current database
        run: |
          curl --fail -o til.db https://raw.githubusercontent.com/jthodge/til-db/main/til.db
      
      - name: Create backup
        run: |
          cp til.db til.db.backup-$(date +%Y%m%d-%H%M%S)
      
      - name: Perform maintenance
        id: maintenance
        env:
          MAINTENANCE_TYPE: ${{ github.event.inputs.maintenance-type || 'check' }}
        run: |
          case "$MAINTENANCE_TYPE" in
            "check")
              echo "## Database Health Check" >> maintenance-report.md
              echo "" >> maintenance-report.md
              
              # Check for duplicates
              echo "### Duplicate Check" >> maintenance-report.md
              DUPLICATES=$(uv run sqlite3 til.db "SELECT slug, topic, COUNT(*) as count FROM til GROUP BY slug, topic HAVING count > 1;" | wc -l)
              echo "Duplicate entries found: $DUPLICATES" >> maintenance-report.md
              echo "" >> maintenance-report.md
              
              # Check integrity
              echo "### Integrity Check" >> maintenance-report.md
              uv run sqlite3 til.db "PRAGMA integrity_check;" >> maintenance-report.md
              echo "" >> maintenance-report.md
              
              # Database statistics
              echo "### Database Statistics" >> maintenance-report.md
              echo "Total entries: $(uv run sqlite3 til.db 'SELECT COUNT(*) FROM til;')" >> maintenance-report.md
              echo "Entries with content/ prefix: $(uv run sqlite3 til.db 'SELECT COUNT(*) FROM til WHERE path LIKE \"content_%\";')" >> maintenance-report.md
              echo "Entries without timestamps: $(uv run sqlite3 til.db 'SELECT COUNT(*) FROM til WHERE created IS NULL;')" >> maintenance-report.md
              echo "" >> maintenance-report.md
              
              # Check if action needed
              if [ "$DUPLICATES" -gt 0 ]; then
                echo "action-needed=true" >> $GITHUB_OUTPUT
                echo "### Action Required" >> maintenance-report.md
                echo "Duplicates detected. Run deduplication maintenance." >> maintenance-report.md
              else
                echo "action-needed=false" >> $GITHUB_OUTPUT
                echo "### Status" >> maintenance-report.md
                echo "Database is healthy. No action required." >> maintenance-report.md
              fi
              ;;
              
            "dedup")
              echo "## Deduplication Maintenance" >> maintenance-report.md
              echo "" >> maintenance-report.md
              
              # Run deduplication
              uv run python src/til/production_safe_migration.py til.db
              
              # Verify results
              DUPLICATES_AFTER=$(uv run sqlite3 til.db "SELECT slug, topic, COUNT(*) as count FROM til GROUP BY slug, topic HAVING count > 1;" | wc -l)
              echo "Duplicates after migration: $DUPLICATES_AFTER" >> maintenance-report.md
              
              if [ "$DUPLICATES_AFTER" -eq 0 ]; then
                echo "action-needed=false" >> $GITHUB_OUTPUT
                echo "Deduplication successful!" >> maintenance-report.md
              else
                echo "action-needed=true" >> $GITHUB_OUTPUT
                echo "Deduplication failed. Manual intervention required." >> maintenance-report.md
              fi
              ;;
              
            "optimize")
              echo "## Database Optimization" >> maintenance-report.md
              echo "" >> maintenance-report.md
              
              # Run VACUUM
              echo "Running VACUUM..." >> maintenance-report.md
              uv run sqlite3 til.db "VACUUM;"
              
              # Run ANALYZE
              echo "Running ANALYZE..." >> maintenance-report.md
              uv run sqlite3 til.db "ANALYZE;"
              
              # Rebuild search index
              echo "Rebuilding search index..." >> maintenance-report.md
              uv run python -c "
import sqlite_utils
db = sqlite_utils.Database('til.db')
db['til'].enable_fts(['title', 'body'], tokenize='porter', create_triggers=True, replace=True)
"
              
              echo "Optimization complete!" >> maintenance-report.md
              echo "action-needed=false" >> $GITHUB_OUTPUT
              ;;
              
            "full")
              echo "## Full Database Maintenance" >> maintenance-report.md
              echo "" >> maintenance-report.md
              
              # Run all maintenance tasks
              echo "Running full maintenance..." >> maintenance-report.md
              
              # 1. Deduplication
              echo "### Deduplication" >> maintenance-report.md
              uv run python src/til/production_safe_migration.py til.db
              
              # 2. Optimization
              echo "### Optimization" >> maintenance-report.md
              uv run sqlite3 til.db "VACUUM;"
              uv run sqlite3 til.db "ANALYZE;"
              
              # 3. Final check
              echo "### Final Check" >> maintenance-report.md
              FINAL_DUPLICATES=$(uv run sqlite3 til.db "SELECT slug, topic, COUNT(*) as count FROM til GROUP BY slug, topic HAVING count > 1;" | wc -l)
              echo "Final duplicate count: $FINAL_DUPLICATES" >> maintenance-report.md
              
              if [ "$FINAL_DUPLICATES" -eq 0 ]; then
                echo "action-needed=false" >> $GITHUB_OUTPUT
                echo "Full maintenance completed successfully!" >> maintenance-report.md
              else
                echo "action-needed=true" >> $GITHUB_OUTPUT
                echo "Issues remain after maintenance." >> maintenance-report.md
              fi
              ;;
          esac
          
          cat maintenance-report.md
      
      - name: Upload maintenance report
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-report
          path: maintenance-report.md
          retention-days: 30
      
      - name: Update database if changed
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Check if database was modified
          if ! cmp -s til.db til.db.backup-*; then
            # Push to til-db repository
            git clone https://github.com/jthodge/til-db.git
            cd til-db
            cp ../til.db .
            git add til.db
            git commit -m "Database maintenance: ${{ github.event.inputs.maintenance-type || 'scheduled' }}"
            git push
          fi
      
      - name: Create issue if action needed
        if: steps.maintenance.outputs.action-needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('maintenance-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.name,
              title: 'üîß Database Maintenance Required',
              body: report,
              labels: ['maintenance', 'database']
            });
      
      - name: Post to Slack if configured
        if: env.SLACK_WEBHOOK != ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          STATUS="${{ steps.maintenance.outputs.action-needed == 'true' && '‚ö†Ô∏è Action Required' || '‚úÖ Healthy' }}"
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"TIL Database Maintenance: $STATUS\"}" \
            $SLACK_WEBHOOK